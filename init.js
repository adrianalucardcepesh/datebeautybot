const { Telegraf, Markup, Scenes, session } = require('telegraf');
const bot = require('./config/config');
const { startCommand } = require ("./keyboards/greatKey");
const { createScenes } = require ("./create")
const userDelete = require('./delete')
const { sendProfile } = require ("./sendProfile")
const { dateUsers } = require ("./dateUsers")




bot.use((ctx, next) => {
    if (!ctx.session) {
        ctx.session = {};
    }
    if (!ctx.session.profiles) {
        ctx.session.profiles = []; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –º–∞—Å—Å–∏–≤ –∞–Ω–∫–µ—Ç –∑–¥–µ—Å—å
    }
    next();
});

bot.use(session());
createScenes(bot)

bot.action(['mann', 'womann', 'anyy'], (ctx) => {

    if (!ctx.session) {
        ctx.session = {};
    }

    if (ctx.session.gender_to_searchChoice) {
        return ctx.reply('–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Å–≤–æ–π –≤—ã–±–æ—Ä –ø–æ–ª–∞. –•–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ?', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–î–∞', callback_data: 'reset' }],
                    [{ text: '–ù–µ—Ç', callback_data: 'continue' }]
                ]
            }
        });
    }
});
bot.command('start', startCommand);
bot.action('fill_form', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.scene.enter('firstQuestion');
});

bot.action('create', async (ctx) => {
    try {
        ctx.scene.enter('startScene');

    } catch (err) {
        console.error(err);
        ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç—É –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã.');
    }
});
    bot.action('updater', (ctx) => {
    startCommand(ctx);
    });
    bot.action('update', (ctx) => {
    startCommand(ctx);

    bot.action('delete', async (ctx) => {
            try {
                await userDelete.deleteFunction(ctx);
            } catch (err) {
                console.error(err);
                ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç—É –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã.');
            }
    });
    bot.action('search', async (ctx) => {
            try {
                await dateUsers(ctx);
            } catch (err) {
                console.error(err);
                ctx.reply('–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã');
            }
    });
        bot.action('like', async (ctx) => {
            const { profiles, currentProfileIndex } = ctx.session;

            if (profiles && Array.isArray(profiles) && currentProfileIndex < profiles.length) {
                const profile = profiles[currentProfileIndex];

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø—Ä–æ—Ñ–∏–ª—è –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (username)
                if (profile.username) {
                    const telegramUrl = `https://t.me/${profile.username}`;
                    ctx.reply(`–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è üòº ${telegramUrl}`);

                } else if (profile.telegram_id) {
                    const firstName = `${profile.name} ${profile.surname}`;

                    const formattedName = `[${firstName}](tg://user?id=${profile.telegram_id})`;
                    const textPredict = "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è üòº"; // –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –Ω–∞ –≤–∞—à —Ç–µ–∫—Å—Ç
                    const messageText = `${formattedName}, ${textPredict}`;

                    ctx.replyWithMarkdownV2(messageText);

                } else {
                    // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∏ telegram_id
                    ctx.reply('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.');
                }

                let text = `üëª`;

                ctx.reply(text, {
                    reply_markup: {
                        keyboard: [
                            [{text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'}],
                        ],
                        resize_keyboard: true,
                        one_time_keyboard: true,
                    },
                });
            }
        });
        bot.action('next', async (ctx) => {
            ctx.session.currentProfileIndex++;

            // –ó–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ
            if (ctx.session.currentProfileIndex >= ctx.session.profiles.length) {
                ctx.session.currentProfileIndex %= ctx.session.profiles.length;

            }
            await sendProfile(ctx);
        });
});



    bot.action('continue', (ctx) => {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ, —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é createScenes

        ctx.deleteMessage(); // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    });

    // // createScenes(bot)
    // console.log(ctx.match); // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    // let gender_to_searchText = '';

    // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞ ctx.match
    // const action = ctx.match[0];

    // switch (action) {
    //     case 'mann':
    //         gender_to_searchText = '–ü–∞—Ä–Ω—è';
    //         break;
    //     case 'womann':
    //         gender_to_searchText = '–î–µ–≤—É—à–∫—É';
    //         break;
    //     case 'anyy':
    //         gender_to_searchText = '–õ—é–±–æ–π –ø–æ–ª';
    //         break;
    //     default:
    //         // –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —ç—Ç–æ
    //         gender_to_searchText = '–õ—é–±–æ–π –ø–æ–ª';
    //         break;
    // }

    // ctx.session.gender_to_searchChoice = action;// –ó–¥–µ—Å—å —Ç–∞–∫–∂–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é action
    //
    // // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    // ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏ "${gender_to_searchText}"`);
    //
    // bot.action('mann', gender_to_searchCommand);
    //
    // bot.action('womann', gender_to_searchCommand);
    //
    // bot.action('anyy', gender_to_searchCommand);





// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
// bot.start((ctx) => {
//     console.log('–û–±—Ä–∞–±–æ—Ç—á–∏–∫ startCommand –≤—ã–∑–≤–∞–Ω'); // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
//     startCommand(ctx); // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é startCommand –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
// });

bot.hears('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', startCommand);
bot.command('start', startCommand);

bot.launch()

