const { Telegraf, Markup, Scenes, session } = require('telegraf');
const bot = require('./config/config');
const { startCommand } = require ("./keyboards/greatKey");
const { createScenes } = require ("./create")
const userDelete = require('./delete')
const { dateUsers } = require ("./dateUsers")
const geolib = require('geolib');
const util = require('util');
const { sendProfile } = require('./sendProfile')



bot.use((ctx, next) => {
    if (!ctx.session) {
        ctx.session = {};
    }
    if (!ctx.session.profiles) {
        ctx.session.profiles = []; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –º–∞—Å—Å–∏–≤ –∞–Ω–∫–µ—Ç –∑–¥–µ—Å—å
    }
    if (ctx.session.currentUserIndex === undefined) {
        ctx.session.currentUserIndex = 0;
    }
    next();
});



bot.use(session());
createScenes(bot)



bot.action(['mann', 'womann', 'anyy'], (ctx) => {

    if (!ctx.session) {
        ctx.session = {};
    }

    if (ctx.session.gendersearchChoice) {
        return ctx.reply('–í—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ —Å–≤–æ–π –≤—ã–±–æ—Ä –ø–æ–ª–∞. –•–æ—Ç–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ?', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: '–î–∞', callback_data: 'reset' }],
                    [{ text: '–ù–µ—Ç', callback_data: 'continue' }]
                ]
            }
        });
    }
});
bot.command('start', startCommand);
bot.action('fill_form', async (ctx) => {
    await ctx.answerCbQuery();
    await ctx.scene.enter('firstQuestion');
});

bot.action('create', async (ctx) => {
    try {
        ctx.scene.enter('startScene');

    } catch (err) {
        console.error(err);
        ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç—É –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã.');
    }
});
    bot.action('updater', (ctx) => {
    startCommand(ctx);
    });
    bot.action('update', (ctx) => {
    startCommand(ctx);

    bot.action('delete', async (ctx) => {
            try {
                await userDelete.deleteFunction(ctx);
            } catch (err) {
                console.error(err);
                ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç—É –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã.');
            }
    });
        bot.action('delete', async (ctx) => {
            try {
                await userDelete.deleteFunction(ctx);
            } catch (err) {
                console.error(err);
                ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç—É –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã.');
            }
        });


        bot.action('like', async (ctx) => {
            const { profiles, currentProfileIndex } = ctx.session;

            if (profiles && Array.isArray(profiles) && currentProfileIndex < profiles.length) {
                const profile = profiles[currentProfileIndex];

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø—Ä–æ—Ñ–∏–ª—è –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (username)
                if (profile.username) {
                    const telegramUrl = `https://t.me/${profile.username}`;
                    ctx.reply(`–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è üòº ${telegramUrl}`);

                } else if (profile.telegram_id) {
                    const firstName = `${profile.name} ${profile.surname}`;

                    const formattedName = `[${firstName}](tg://user?id=${profile.telegram_id})`;
                    const textPredict = "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è üòº"; // –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –Ω–∞ –≤–∞—à —Ç–µ–∫—Å—Ç
                    const messageText = `${formattedName}, ${textPredict}`;

                    ctx.replyWithMarkdownV2(messageText);

                } else {
                    // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∏ telegram_id
                    ctx.reply('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.');
                }

                let text = `üëª`;

                ctx.reply(text, {
                    reply_markup: {
                        keyboard: [
                            [{text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'}],
                        ],
                        resize_keyboard: true,
                        one_time_keyboard: true,
                    },
                });
            }
        });
        bot.action('next', async (ctx) => {
            ctx.session.currentProfileIndex++;

            // –ó–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ
            if (ctx.session.currentProfileIndex >= ctx.session.profiles.length) {
                ctx.session.currentProfileIndex %= ctx.session.profiles.length;

            }
            await sendProfile(ctx);
        });

        bot.action('complain', (ctx) => {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –∞–Ω–∫–µ—Ç—É", –∑–∞–ø—Ä–æ—Å–∏–º —É –Ω–µ–≥–æ —Ç–µ–∫—Å—Ç –∂–∞–ª–æ–±—ã
            ctx.session.complainStep = 'waiting_for_complaint';
            ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–π –∂–∞–ª–æ–±—ã:');
        });

// Middleware –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
        bot.use((ctx, next) => {
            ctx.session = ctx.session || {};
            return next();
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        bot.on('text', (ctx) => {
            if (ctx.session.complainStep === 'waiting_for_complaint') {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª –∂–∞–ª–æ–±—É, –æ—Ç–ø—Ä–∞–≤–∏–º –µ—ë –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
                const complaintText = ctx.message.text;
                bot.telegram.sendMessage(6638651166, `–ñ–∞–ª–æ–±–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.from.username || ctx.from.id}: ${complaintText}`);
                ctx.reply('–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.');
                // –°–±—Ä–æ—Å–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
                ctx.session.complainStep = null;
            }
        });
        bot.action('search', async (ctx) => {
            try {
                await dateUsers(ctx);

            } catch (err) {
                console.error(util.inspect(err, { depth: null })); // Show complete error without limitation
                ctx.reply('–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∞–Ω–∫–µ—Ç—ã');
            }
        });
        // bot.command('search', async (ctx) => {
        //     try {
        //         const userCity = await getCityForUser(ctx.from.id); // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        //         if (!userCity) {
        //             ctx.reply('–í–∞—à –≥–æ—Ä–æ–¥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥.');
        //             return;
        //         }
        //
        //         const userCityCoordinates = citiesCoordinates[userCity]; // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        //         if (!userCityCoordinates) {
        //             ctx.reply(`–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞ ${userCity} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.`);
        //             return;
        //         }
        //
        //         // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–≤–º–µ—Å—Ç–æ usersDatabase)
        //         // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è getUsersFromDb, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å
        //         const usersFromDb = await dateUsers();
        //
        //         // –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ maxDistance –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        //         const maxDistance = 50000; // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö
        //         const nearbyUsers = usersFromDb.filter(user => {
        //             const userCityCoordinates = citiesCoordinates[user.city];
        //             console.log('User city coordinates:', userCityCoordinates);
        //             if (!userCityCoordinates) return false;
        //
        //             const distance = geolib.getDistance(userCityCoordinates, userCityCoordinates);
        //             return distance <= maxDistance;
        //         });
        //
        //         // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        //         let message = nearbyUsers.length ? '–ë–ª–∏–∂–∞–π—à–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n' : '–ü–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n';
        //         nearbyUsers.forEach(user => {
        //             message += `Username: ${user.username}, Age: ${user.age}, City: ${user.city}\n`;
        //         });
        //
        //         ctx.reply(message);
        //     } catch (error) {
        //         console.error(error);
        //         ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.');
        //     }
        // });



    });



    bot.action('continue', (ctx) => {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ, —É–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é createScenes

        ctx.deleteMessage(); // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    });

    // // createScenes(bot)
    // console.log(ctx.match); // –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    // let gendersearchText = '';

    // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞ ctx.match
    // const action = ctx.match[0];

    // switch (action) {
    //     case 'mann':
    //         gendersearchText = '–ü–∞—Ä–Ω—è';
    //         break;
    //     case 'womann':
    //         gendersearchText = '–î–µ–≤—É—à–∫—É';
    //         break;
    //     case 'anyy':
    //         gendersearchText = '–õ—é–±–æ–π –ø–æ–ª';
    //         break;
    //     default:
    //         // –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è —ç—Ç–æ
    //         gendersearchText = '–õ—é–±–æ–π –ø–æ–ª';
    //         break;
    // }

    // ctx.session.gendersearchChoice = action;// –ó–¥–µ—Å—å —Ç–∞–∫–∂–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é action
    //
    // // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    // ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏ "${gendersearchText}"`);
    //
    // bot.action('mann', gendersearchCommand);
    //
    // bot.action('womann', gendersearchCommand);
    //
    // bot.action('anyy', gendersearchCommand);





// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
// bot.start((ctx) => {
//     console.log('–û–±—Ä–∞–±–æ—Ç—á–∏–∫ startCommand –≤—ã–∑–≤–∞–Ω'); // –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
//     startCommand(ctx); // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é startCommand –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
// });

bot.hears('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', startCommand);
bot.command('start', startCommand);

bot.launch()

