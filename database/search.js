const { Telegraf, Markup, Scenes, session } = require('telegraf');
const axios = require('axios');
const db = require('../database/db-pool');



const ITEMS_PER_PAGE = 10; // Define how many items you want per page
async function renderCityPage(ctx, currentPage) {
    try {
        // Get cities list from API
        const response = await axios.get('https://raw.githubusercontent.com/adrianalucardcepesh/russian-cities-json/main/cities.json');

        // Sort cities alphabetically
        const cities = response.data.map(city => city.name).sort((a, b) => a.localeCompare(b));

        // Calculate cities for the current page
        const pageCities = cities.slice(currentPage * ITEMS_PER_PAGE, (currentPage + 1) * ITEMS_PER_PAGE);

        // Create city buttons for the current page
        const cityButtons = pageCities.map(city =>
            Markup.button.callback(city, `city_select_${city}`)
        );

        // Create navigation buttons
        const navigationButtons = [];
        if (currentPage > 0) {
            navigationButtons.push(Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `page_${currentPage - 1}`));
        }
        if ((currentPage + 1) * ITEMS_PER_PAGE < cities.length) {
            navigationButtons.push(Markup.button.callback('–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', `page_${currentPage + 1}`));
        }

        // Combine city buttons with navigation buttons
        const keyboard = Markup.inlineKeyboard([...cityButtons, ...navigationButtons], { columns: 2 }).resize();

        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥: üèô', keyboard);

        let text = '–ß—Ç–æ–±—ã –±—ã—Å—Ç—Ä–µ–µ –Ω–∞–π—Ç–∏ –≤–∞—à –≥–æ—Ä–æ–¥, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–Ω–∏–∑—É üëá';
        await ctx.reply(text, {
            reply_markup: {
                keyboard: [
                    [{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }],
                ],
                resize_keyboard: true,
                one_time_keyboard: true,
            },
        });
    } catch (error) {
        console.error('Error fetching city data:', error);
        await ctx.reply('An error occurred while fetching the list of cities.');
    }
    ctx.scene.enter('age');
}

module.exports = {
    insertCityForUser
};


// Initialize a base scene for 'city'
// –í –≤–∞—à–µ–º –∫–æ–¥–µ –¥–ª—è cityScene –∏–ª–∏ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ, –≥–¥–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏ –≥–æ—Ä–æ–¥–æ–≤
cityScene.action(/^city_select_(.+)$/, async (ctx) => {
    const selectedCity = ctx.match[1];
    const userId = ctx.from.id; // Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤–∞—à–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –≤ –±–¥; –µ—Å–ª–∏ –Ω–µ—Ç, –≤–∞–º –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try {
        await insertCityForUser(userId, selectedCity);
        await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: ${selectedCity}`);
    } catch (error) {
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –≥–æ—Ä–æ–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞.');
    }

    // –ó–∞–∫—Ä—ã—Ç–∏–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await ctx.answerCbQuery();
})

async function insertCityForUser(userId, selectedCity) {
    let conn;
    try {
        conn = await db.getConnection();
        // Here we're assuming the table is named 'users' and has columns 'id' for userID and 'city' for the city
        // Also assuming 'id' is a primary key or unique field so "upsert" can be done using ON DUPLICATE KEY UPDATE
        const query = `
            INSERT INTO users (id, city)
            VALUES (?, ?) ON DUPLICATE KEY UPDATE city = VALUES(city)
        `;
        const result = await conn.query(query, [userId, selectedCity]);
        return result;
    } catch (error) {
        console.error('An error occurred while inserting/updating the city for the user:', error);
        throw error;
    } finally {
        // Always close connection whether query was successful or not
        if (conn) conn.release();
    }
}


cityScene.enter(async (ctx) => {
    await renderCityPage(ctx, 0); // Start page at 0
});




// Function for rendering search results of cities
async function searchForCity(searchQuery, ctx) {
    try {

        // Fetch cities list from API
        const response = await axios.get('https://raw.githubusercontent.com/adrianalucardcepesh/russian-cities-json/main/cities.json');

        // Filter cities that include the search query
        const searchResults = response.data
            .map(city => city.name)
            .filter(cityName => cityName.toLowerCase().includes(searchQuery.toLowerCase()));

        // Limit the number of search results
        const limitedResults = searchResults.slice(0, ITEMS_PER_PAGE);

        // Create city buttons from search results
        const cityButtons = limitedResults.map(city =>
            Markup.button.callback(city, `city_select_${city}`)
        );

        // Prepare the keyboard with search results
        const keyboard = Markup.inlineKeyboard(cityButtons, { columns: 1 }).resize();

        if (cityButtons.length === 0) {
            await ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≥–æ—Ä–æ–¥–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.');
        } else {
            await ctx.reply('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', keyboard);
        }

    } catch (error) {
        console.error('Error while searching for cities:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥–æ—Ä–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
}

// ...cityScene and renderCityPage code...

cityScene.on('text', async (ctx) => {
    // Use the message text as a query for searching cities
    await searchForCity(ctx.message.text, ctx);
});