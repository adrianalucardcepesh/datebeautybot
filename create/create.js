const { Telegraf, Markup, Scenes, session } = require('telegraf');
const axios = require('axios');
const db = require('../database/db-pool');
const { createAndShowProfile } = require('../create/createAndShowProfile.js');


const fs = require('fs');
const path = require('path');
const fetch = require('node-fetch');




//     const firstQuestionScene = new Scenes.BaseScene('firstQuestion');
//
//     firstQuestionScene.enter(async (ctx) => {
//         let text = '–ß—Ç–æ –±—ã —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É. –í–∞–º –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ–±–æ–ª—å—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤  üíØ  : ';
//         await ctx.reply(text, {
//             reply_markup: {
//                 keyboard: [
//                     [{ text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ' }],
//                 ],
//                 resize_keyboard: true,
//                 one_time_keyboard: true,
//             },
//         });
//
//         await ctx.reply(
//             '–°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –≤–∞—à–∏–º –ø–æ–ª–æ–º ‚öß:',
//             Markup.inlineKeyboard([
//                 Markup.button.callback('–Ø –ø–∞—Ä–µ–Ω—å üë®', 'mann'),
//                 Markup.button.callback('–Ø –¥–µ–≤—É—à–∫–∞ üë±‚Äç‚ôÄÔ∏è', 'womann'),
//             ])
//         );
//     });
//
//     firstQuestionScene.action('mann', async (ctx) => {
//         await ctx.answerCbQuery();
//         await ctx.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ "–Ø –ø–∞—Ä–µ–Ω—å"  üë®');
//         ctx.scene.enter('secondQuestion');
//     });
//     firstQuestionScene.action('womann', async (ctx) => {
//         await ctx.answerCbQuery();
//         await ctx.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ "–Ø –¥–µ–≤—É—à–∫–∞" üë±‚Äç‚ôÄÔ∏è');
//         ctx.scene.enter('secondQuestion');
//     });
//
// // –°–æ–∑–¥–∞–π—Ç–µ —Å—Ü–µ–Ω—É –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
//
//     const secondQuestionScene = new Scenes.BaseScene('secondQuestion');
//
//     secondQuestionScene.enter(async (ctx) => {
//         await ctx.reply("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–≥–æ –≤—ã –∏—â–µ—Ç–µ:  üíï ", Markup.inlineKeyboard([
//             [
//
//                                 Markup.button.callback('–ü–∞—Ä–Ω—è üë®', 'search_mann'),
//                                 Markup.button.callback('–î–µ–≤—É—à–∫—É üë±‚Äç‚ôÄÔ∏è', 'search_womann')
//                             ],
//
//                             [
//                                 Markup.button.callback('–õ—é–±–æ–π –ø–æ–ª üë§', 'any')
//                             ],
//
//         ]));
//     });
//
// // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–∞—Ä–Ω—è üë®"
//     secondQuestionScene.action('search_mann', async (ctx) => {
//         await ctx.answerCbQuery();
//         await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏: –ü–∞—Ä–Ω—è üë® `);
//         ctx.scene.enter('name'); // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ü–µ–Ω—É –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
//     });
//
// // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–µ–≤—É—à–∫—É üë±‚Äç‚ôÄÔ∏è"
//     secondQuestionScene.action('search_womann', async (ctx) => {
//         await ctx.answerCbQuery();
//         await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏: –î–µ–≤—É—à–∫—É üë±‚Äç‚ôÄ `);
//         ctx.scene.enter('name'); // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ü–µ–Ω—É –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
//     });
//
// // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–õ—é–±–æ–π –ø–æ–ª üë§"
//     secondQuestionScene.action('any', async (ctx) => {
//         await ctx.answerCbQuery();
//         await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏: –õ—é–±–æ–π –ø–æ–ª üë§ `);
//         ctx.scene.enter('name'); // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ü–µ–Ω—É –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏
//     });


    //
    // const secondQuestionScene = new Scenes.BaseScene('secondQuestion');
    // secondQuestionScene.enter(async (ctx) => {
    //     // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    //     const userChoice = ctx.session.userGender || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ';
    //     // –°–æ–æ–±—â–∞–µ–º –æ–± —ç—Ç–æ–º
    //     await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏: ${userChoice}`);
    //     // –ó–∞–¥–∞–µ–º –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å
    //     await ctx.reply(
    //         '–¢–µ–ø–µ—Ä—å –∫–æ–≥–æ –≤—ã –∏—â–∏—Ç–µ:',
    //         Markup.inlineKeyboard([
    //             [
    //
    //                 Markup.button.callback('–ü–∞—Ä–Ω—è üë®', 'search_mann'),
    //                 Markup.button.callback('–î–µ–≤—É—à–∫—É üë±‚Äç‚ôÄÔ∏è', 'search_womann')
    //             ],
    //
    //             [
    //                 Markup.button.callback('–õ—é–±–æ–π –ø–æ–ª üë§', 'any')
    //             ],
    //         ])
    //     );
    // });

    function createScenes(bot) {

    const nameScene = new Scenes.BaseScene('name');

    nameScene.enter((ctx) => {
        ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è:');
    });

    nameScene.on('text', (ctx) => {
        if (!ctx.message.text) {
            ctx.reply('–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!');
            return;
        }

        ctx.session.name = ctx.message.text;
        ctx.scene.enter('surname');

    });
    // –°—Ü–µ–Ω–∞ 'surname'
    const surnameScene = new Scenes.BaseScene('surname');
    surnameScene.enter((ctx) => ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:'));
    surnameScene.on('text', (ctx) => {
        ctx.session.surname = ctx.message.text;
        ctx.scene.enter('city');
    });

    const cityScene = new Scenes.BaseScene('city');

    const ITEMS_PER_PAGE = 10; // Define how many items you want per page
        cityScene.enter(async (ctx) => {
            await renderCityPage(ctx, 0); // Start page at 0
        });
    async function renderCityPage(ctx, currentPage) {
        try {
            // Get cities list from API
            const response = await axios.get('https://raw.githubusercontent.com/adrianalucardcepesh/russian-cities-json/main/cities.json');

            // Sort cities alphabetically
            const cities = response.data.map(city => city.name).sort((a, b) => a.localeCompare(b));

            // Calculate cities for the current page
            const pageCities = cities.slice(currentPage * ITEMS_PER_PAGE, (currentPage + 1) * ITEMS_PER_PAGE);

            // Create city buttons for the current page
            const cityButtons = pageCities.map(city =>
                Markup.button.callback(city, `city_select_${city}`)
            );

            // Create navigation buttons
            const navigationButtons = [];
            if (currentPage > 0) {
                navigationButtons.push(Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `page_${currentPage - 1}`));
            }
            if ((currentPage + 1) * ITEMS_PER_PAGE < cities.length) {
                navigationButtons.push(Markup.button.callback('–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', `page_${currentPage + 1}`));
            }

            // Combine city buttons with navigation buttons
            const keyboard = Markup.inlineKeyboard([...cityButtons, ...navigationButtons], {columns: 2}).resize();

            await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥: üèô', keyboard);

            let text = '–ß—Ç–æ–±—ã –±—ã—Å—Ç—Ä–µ–µ –Ω–∞–π—Ç–∏ –≤–∞—à –≥–æ—Ä–æ–¥, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–Ω–∏–∑—É \n\n –ò–ª–∏ –≤–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤—ã–µ —Ç—Ä–∏-—á–µ—Ç—ã—Ä–µ –±—É–∫–≤—ã –≥–æ—Ä–æ–¥–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ enter üëá';
            await ctx.reply(text, {
                reply_markup: {
                    keyboard: [
                        [{text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'}],
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: true,
                },
            });
        } catch (error) {
            console.error('Error fetching city data:', error);
            await ctx.reply('An error occurred while fetching the list of cities.');
        }
    }



// Initialize a base scene for 'city'
        // –í –≤–∞—à–µ–º –∫–æ–¥–µ –¥–ª—è cityScene –∏–ª–∏ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ, –≥–¥–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏ –≥–æ—Ä–æ–¥–æ–≤
        cityScene.action(/^city_select_(.+)$/, async (ctx) => {
            const selectedCity = ctx.match[1];
            const userId = ctx.from.id; // Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤–∞—à–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –≤ –±–¥; –µ—Å–ª–∏ –Ω–µ—Ç, –≤–∞–º –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try {
                await insertCityForUser(userId, selectedCity);
                await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥:  ${selectedCity}`);
                ctx.scene.enter('age');

            } catch (error) {
                // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –≥–æ—Ä–æ–¥–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:', error);
                await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞.');
            }


            // –ó–∞–∫—Ä—ã—Ç–∏–µ inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            await ctx.answerCbQuery();
        })


        async function insertCityForUser(userId, selectedCity) {
            let conn;
            try {
                conn = await db.getConnection();
                // Here we're assuming the table is named 'users' and has columns 'id' for userID and 'city' for the city
                // Also assuming 'id' is a primary key or unique field so "upsert" can be done using ON DUPLICATE KEY UPDATE
                const query = `
                    INSERT INTO users (id, city)
                    VALUES (?, ?) ON DUPLICATE KEY
                    UPDATE city =
                    VALUES (city)
                `;
                const result = await conn.query(query, [userId, selectedCity]);
                return result;
            } catch (error) {
                console.error('An error occurred while inserting/updating the city for the user:', error);
                throw error;
            } finally {
                // Always close connection whether query was successful or not
                if (conn) conn.release();
            }
        }








// Function for rendering search results of cities
    async function searchForCity(searchQuery, ctx) {
        try {
            // Fetch cities list from the API
            const response = await axios.get('https://raw.githubusercontent.com/adrianalucardcepesh/russian-cities-json/main/cities.json');
            const searchResults = response.data
                .filter(city => city.name.toLowerCase().includes(searchQuery.toLowerCase()));

            if (!searchResults.length) {
                await ctx.reply('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –≥–æ—Ä–æ–¥–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
            } else {
                // –ú–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ –∏—Ö —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
                const cityButtons = searchResults.map((city) =>
                    Markup.button.callback(city.name, `city_select_${city.name}`)
                );

                // –ü–æ–∫–∞–∂–∏—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≥–æ—Ä–æ–¥–æ–≤
                await ctx.reply(
                    '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞:',
                    Markup.inlineKeyboard(cityButtons, { columns: 2 })
                );
            }
        } catch (error) {
            console.error('Error while searching for cities:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥–æ—Ä–æ–¥–∞.');
        }
    }

// ...cityScene and renderCityPage code...

    cityScene.on('text', async (ctx) => {
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥
        const searchQuery = ctx.message.text; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–µ–∫—Å—Ç.
        await searchForCity(searchQuery, ctx);
    });


// –°—Ü–µ–Ω–∞ 'age'
    const ageScene = new Scenes.BaseScene('age');
    ageScene.enter((ctx) => ctx.reply('–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç :'));
    ageScene.on('text', (ctx) => {
        const age = Number(ctx.message.text);

        if (isNaN(age)) {
            ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞  0Ô∏è‚É£1Ô∏è‚É£:  ');
            return;
        }

        if (age < 18) {
            ctx.reply('–í–∞–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 18 –ª–µ—Ç');
            return;
        } else if (age > 60) {
            ctx.reply('–í–∞–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 60 –ª–µ—Ç');
            return;
        }

        ctx.session.age = age;

        ctx.scene.enter('info');
    });


// –°—Ü–µ–Ω–∞ 'info'
    const infoScene = new Scenes.BaseScene('info');

    infoScene.enter((ctx) => {
        ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ: üíÆ: ');
    });

    infoScene.on('text', (ctx) => {
        if (!ctx.message.text) {
            ctx.reply('–≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!');
            return;
        }

        ctx.session.info = ctx.message.text;

        ctx.scene.enter('search');
    });

// –°—Ü–µ–Ω–∞ 'search'
    const searchScene = new Scenes.BaseScene('search');
    searchScene.enter((ctx) => ctx.reply('–û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –∫–æ–≥–æ –∏–ª–∏ —á—Ç–æ –≤—ã –∏—â–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: \\n –¥—Ä—É–≥–∞, \\–ø –∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–∞ –≤–µ—á–µ—Ä, \\n –æ—Ç–Ω–æ—à–µ–Ω–∏—è, \\n –¥–µ–ª–æ–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞, \\n —Ç–æ–≤–∞—Ä–∏—â–∞ –ø–æ –ø–µ—Ä–µ–ø–∏—Å–∫–µ, \\n —Ä–∞–±–æ—Ç—É, \\n —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é \\n –∏–ª–∏ –º–æ—Ä–∞–ª—å–Ω—É—é –ø–æ–º–æ—â—å –∏ —Ç.–¥'));
    searchScene.on('text', (ctx) => {
        ctx.session.search = ctx.message.text;
        ctx.scene.enter('goal');

    });

    const goalScene = new Scenes.BaseScene('goal');
    goalScene.enter((ctx) => ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞:'));
    goalScene.on('text', (ctx) => {
        ctx.session.goal = ctx.message.text;
        ctx.scene.enter('media');
    });


    const mediaScene = new Scenes.BaseScene('media');


    mediaScene.enter((ctx) => {


        ctx.reply('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ—ë —Ñ–æ—Ç–æ üñº –∏–ª–∏ –≤–∏–¥–µ–æ üé• (mp4) \n \n –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–µ –±–æ–ª—å—à–µ - 5 –ú–ë ' +
            '\n –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–µ –±–æ–ª—å—à–µ - 50 –ú–ë' +
            '\n \n –í–Ω–∏–º–∞–Ω–∏–µ! ‚ö†Ô∏è \n \n  –ï—Å–ª–∏ –≤—ã –∑–∞–≥—Ä—É–∂–∞–µ—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ (—Ç.–µ. –Ω–µ –≤–∞—à–µ —Ñ–æ—Ç–æ), –≤—ã –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–æ–ø–∞–¥–∞–µ—Ç–µ –≤ —á–µ—Ä–Ω—ã–π –±–∞–Ω üö´ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞. \n \n –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–∏–¥–µ–æ! ‚Äç‚úàÔ∏è' +
            '\n \n –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n' +
            '\n' +
            '‚öß –°–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é \n' +
            '\n' +
            '‚öß –ê–Ω–∏–º–µ –∫–∞—Ä—Ç–∏–Ω–∫—É\n' +
            '\n' +
            '‚öß –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç—É –ª–∏—Ü –ª—é–¥–µ–π\n' +
            '\n' +
            '‚öß –ú–µ–º–∞—Å–∏–∫–∏\n' +
            '\n' +
            '‚öß –û—Ç—Ä—ã–≤–∫–∏ –∏–∑ —Ñ–∏–ª—å–º–æ–≤\n' +
            '\n' +
            '‚öß –ú–µ–º-–≤–∏–¥–µ–æ\n' +
            '\n' +
            '‚öß –í–∞—à–µ Tik-Tok –≤–∏–¥–µ–æ (mp4)\n' +
            '\n' +
            '‚öß –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã');
    });

    mediaScene.on(['photo', 'video'], async (ctx) => {

        const MAX_VIDEO_SIZE = 50 * 1024 * 1024; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ (50 MB)
        const MAX_PHOTO_SIZE = 5 * 1024 * 1024; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ (5 –ú–ë)

        const fileId = ctx.message.video ? ctx.message.video.file_id : ctx.message.photo[ctx.message.photo.length - 1].file_id;
        const fileSize = ctx.message.video ? ctx.message.video.file_size : ctx.message.photo[ctx.message.photo.length - 1].file_size;


        const validVideoExtensions = ['mp4'];
        const validPhotoExtensions = ['jpg', 'jpeg', 'png', 'gif'];

        const isVideo = !!ctx.message.video; // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤–∏–¥–µ–æ
        const isPhoto = !!ctx.message.photo; // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Ñ–æ—Ç–æ

        const fileType = isVideo ? 'video' : 'photo';


        if (isVideo) {
            const extension = fileExtension(fileId);
            if (extension && !validVideoExtensions.includes(extension.toLowerCase())) {
                ctx.reply('–§–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å MP4.');
                return;
            }
        } else if (isPhoto) {
            const extension = fileExtension(fileId);
            if (extension && !validPhotoExtensions.includes(extension.toLowerCase())) {
                ctx.reply('–§–æ—Ä–º–∞—Ç —Ñ–æ—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å JPG, JPEG, PNG –∏–ª–∏ GIF.');
                return;
            }
        }


        console.log('MAX_VIDEO_SIZE –≤ –±–∞–π—Ç–∞—Ö:', MAX_VIDEO_SIZE);
        console.log('MAX_PHOTO_SIZE –≤ –±–∞–π—Ç–∞—Ö:', MAX_PHOTO_SIZE);
        console.log('–†–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö:', fileSize);
        console.log('–†–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', fileSize);

        let errorMessage = null;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏ —Ñ–æ—Ä–º–∞—Ç
        if (fileSize > MAX_PHOTO_SIZE && fileType === 'photo') {
            errorMessage = '\n –í–Ω–∏–º–∞–Ω–∏–µ! ‚ö† \n \n  –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–µ –±–æ–ª—å—à–µ - 5 –ú–ë \n \n –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–∏–¥–µ–æ! ‚Äç‚úàÔ∏è';
        }
        if (fileSize > MAX_PHOTO_SIZE && fileType === 'video') {
            errorMessage = '\n –í–Ω–∏–º–∞–Ω–∏–µ! ‚ö† \n \n  –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ –Ω–µ –±–æ–ª—å—à–µ 50 –ú–ë \n \n  –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–∏–¥–µ–æ! ‚Äç‚úàÔ∏è';
        }
        if (ctx.session.uploadedFile) {
            ctx.reply('–í—ã —É–∂–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ —Ñ–∞–π–ª. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª.');
            return;
        }


        if (errorMessage) {
            ctx.reply(errorMessage);
            await ctx.scene.reenter(); // –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ü–µ–Ω—É
            // –í —ç—Ç–æ–º –º–µ—Å—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        } else {
            // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –∏ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –∑–∞–≥—Ä—É–∑–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            const file = await ctx.telegram.getFile(fileId);
            const url = `https://api.telegram.org/file/6538687089:AAFc5JkevqmFzQNAFt9nSS7iJN68kig_iYQ/${file.file_path}`;
            const response = await fetch(url);
            const buffer = await response.buffer();
            const savedPath = path.join(__dirname, 'downloads', fileId);
            fs.writeFileSync(savedPath, buffer);

            await createAndShowProfile(ctx, fileId, fileType, savedPath, ctx.session);

        }
    });

const Stage = new Scenes.Stage([
    // firstQuestionScene,
    // secondQuestionScene,
    nameScene,
    surnameScene,
    cityScene,
    ageScene,
    infoScene,
    searchScene,
    goalScene,
    mediaScene,
]);

bot.use(Stage.middleware());

return Stage;

}
function checkUploadedFiles(ctx) {
    if (!ctx.session.uploadedFiles) {
        ctx.session.uploadedFiles = [];
    }

    if (ctx.session.uploadedFiles.length > 0) {
        ctx.reply('–í—ã —É–∂–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ —Ñ–∞–π–ª. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª.');
        return true;
    }
    return false;
}

const fileExtension = (fileId) => {
    const parts = fileId.split('.');
    if (parts.length > 1) {
        return parts[parts.length - 1].toLowerCase();
    }
    return null;
};

module.exports = {
    createScenes,

};
