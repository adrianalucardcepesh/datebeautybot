const { Telegraf, Markup, Scenes, session } = require('telegraf');
// –°—Ü–µ–Ω–∞ 'city'
const axios = require('axios');

const { startCommand } = require ("../keyboards/greatKey");

const fs = require('fs');
const path = require('path');
const fetch = require('node-fetch');

function createScenes(bot) {

    const cityScene = new Scenes.BaseScene('city');

    cityScene.enter(async (ctx) => {
        renderCityPage(ctx, 0); // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0
    });
    async function renderCityPage(ctx, currentPage) {
        const ITEMS_PER_PAGE = 10; // Define how many items you want per page
        try {
            // Get cities list from API
            const response = await axios.get('https://raw.githubusercontent.com/adrianalucardcepesh/russian-cities-json/main/cities.json');

            // Sort cities alphabetically
            const cities = response.data.map(city => city.name).sort((a, b) => a.localeCompare(b));

            // Calculate cities for the current page
            const pageCities = cities.slice(currentPage * ITEMS_PER_PAGE, (currentPage + 1) * ITEMS_PER_PAGE);

            // Create city buttons for the current page
            const cityButtons = pageCities.map((city, index) =>
                Markup.button.callback(city, `city_select_${index + currentPage * ITEMS_PER_PAGE}`));

            // Create navigation buttons
            const navigationButtons = [];
            if (currentPage > 0) {
                navigationButtons.push(Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `page_${currentPage - 1}`));
            }
            if ((currentPage + 1) * ITEMS_PER_PAGE < cities.length) {
                navigationButtons.push(Markup.button.callback('–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', `page_${currentPage + 1}`));
            }



            // Combine city buttons with navigation buttons
            const keyboard = Markup.inlineKeyboard([...cityButtons, ...navigationButtons], { columns: 2 }).resize();

            await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥: üèô ', keyboard);

            let text = `–ß—Ç–æ –±—ã –±—ã—Å—Ç—Ä–µ–µ –Ω–∞–π—Ç–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥, –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ: üëá  `;
            ctx.reply(text, {
                reply_markup: {
                    keyboard: [
                        [{text: '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'}],
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: true,
                },
            });


        } catch (error) {
            console.error('Error fetching city data:', error);
            await ctx.reply('An error occurred while fetching the list of cities.');
        }
    }

    const ITEMS_PER_PAGE = 5;


    cityScene.on('text', async (ctx) => {
        // –í–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–∞ –∑–¥–µ—Å—å
        await searchForCity(ctx.message.text, ctx);
    });

    async function searchForCity(query, ctx) {
        try {
            const response = await axios.get('https://raw.githubusercontent.com/adrianalucardcepesh/russian-cities-json/main/cities.json');
            const cities = response.data.map(city => city.name).sort((a, b) => a.localeCompare(b));

            // –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –≥–æ—Ä–æ–¥–æ–≤ –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –∑–∞–ø—Ä–æ—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const searchResults = cities.filter(city => city.toLowerCase().includes(query.toLowerCase()));

            if (searchResults.length === 0) {
                // –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ —Å–æ–æ–±—â–∏—Ç—å –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
                await ctx.reply('–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ.');
                return;
            }

            // –ü–æ–¥—Ä–∞–∑—É–º–µ–≤–∞–µ—Ç—Å—è, —á—Ç–æ currentPage —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            let currentPage = 0; // –≠—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –º–æ–≥–ª–æ –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω–æ –∏–∑ ctx.session –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –æ—Ç–≤–µ—á–∞—é—â–µ–π –∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏

            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—è –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É
            const cityButtons = searchResults.map((city, index) =>
                Markup.button.callback(city, `select_${index + currentPage * ITEMS_PER_PAGE}`)
            );

            // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
            const keyboard = Markup.inlineKeyboard(cityButtons, { columns: 2 });

            await ctx.reply('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ üëÄ : \n\n ' + '–¢–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–∏—Ç–µ –µ–≥–æ ü§ôüèº ', keyboard);
        } catch (error) {
            console.error('Error searching cities:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–∞.');
        }
    }
// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
    cityScene.action(/select_(\d+)/, async (ctx) => {
        // –î–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞...
        await ctx.answerCbQuery();
    });

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback –æ—Ç –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    cityScene.action(/page_(\d+)/, async (ctx) => {
        const newPage = parseInt(ctx.match[1]); // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
        await renderCityPage(ctx, newPage); // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –Ω–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        await ctx.answerCbQuery();
    });


// –ü–æ–∑–∂–µ –≤ –∫–æ–¥–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    cityScene.action(/.*/, (ctx) => {
        const selectedCity = ctx.callbackQuery.data;
        ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: ${selectedCity}`);
    });
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_query –≤ —Å—Ü–µ–Ω–µ
    cityScene.on('callback_query', (ctx) => {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –≤ —Å–µ—Å—Å–∏—é
        ctx.session.city = ctx.callbackQuery.data;
        ctx.answerCbQuery(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: ${ctx.session.city}`);
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—é—â—É—é —Å—Ü–µ–Ω—É
        ctx.scene.enter('ageScene');
    });


// –°—Ü–µ–Ω–∞ 'age'
    const ageScene = new Scenes.BaseScene('age');
    ageScene.enter((ctx) => ctx.reply('–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç :'));
    ageScene.on('text', (ctx) => {
        const age = Number(ctx.message.text);

        if (isNaN(age)) {
            ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞');
            return;
        }

        if (age < 18) {
            ctx.reply('–í–∞–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 18 –ª–µ—Ç');
            return;
        } else if (age > 60) {
            ctx.reply('–í–∞–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 60 –ª–µ—Ç');
            return;
        }

        ctx.session.age = age;

        ctx.scene.enter('info');
    });


// –°—Ü–µ–Ω–∞ 'info'
    const infoScene = new Scenes.BaseScene('info');

    infoScene.enter((ctx) => {
        ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:');
    });

    infoScene.on('text', (ctx) => {
        if (!ctx.message.text) {
            ctx.reply('–≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!');
            return;
        }

        ctx.session.info = ctx.message.text;

        ctx.scene.enter('search');
    });

// –°—Ü–µ–Ω–∞ 'search'
    const searchScene = new Scenes.BaseScene('search');
    searchScene.enter((ctx) => ctx.reply('–û–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –∫–æ–≥–æ –∏–ª–∏ —á—Ç–æ –≤—ã –∏—â–∏—Ç–µ: –¥—Ä—É–≥–∞, –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –Ω–∞ –≤–µ—á–µ—Ä, –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –¥–µ–ª–æ–≤–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä–∞, —Ç–æ–≤–∞—Ä–∏—â–∞ –ø–æ –ø–µ—Ä–µ–ø–∏—Å–∫–µ, —Ä–∞–±–æ—Ç—É, —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∏–ª–∏ –º–æ—Ä–∞–ª—å–Ω—É—é –ø–æ–º–æ—â—å –∏ —Ç.–¥'));
    searchScene.on('text', (ctx) => {
        ctx.session.search = ctx.message.text;
        ctx.scene.enter('goal');

    });

    const goalScene = new Scenes.BaseScene('goal');
    goalScene.enter((ctx) => ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞:'));
    goalScene.on('text', (ctx) => {
        ctx.session.goal = ctx.message.text;
        ctx.scene.enter('media');
    });


    const mediaScene = new Scenes.BaseScene('media');


    mediaScene.enter((ctx) => {


        ctx.reply('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ—ë —Ñ–æ—Ç–æ üñº –∏–ª–∏ –≤–∏–¥–µ–æ üé• (mp4) \n \n –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–µ –±–æ–ª—å—à–µ - 5 –ú–ë ' +
            '\n –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–µ –±–æ–ª—å—à–µ - 50 –ú–ë' +
            '\n \n –í–Ω–∏–º–∞–Ω–∏–µ! ‚ö†Ô∏è \n \n  –ï—Å–ª–∏ –≤—ã –∑–∞–≥—Ä—É–∂–∞–µ—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ (—Ç.–µ. –Ω–µ –≤–∞—à–µ —Ñ–æ—Ç–æ), –≤—ã –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –ø–æ–ø–∞–¥–∞–µ—Ç–µ –≤ —á–µ—Ä–Ω—ã–π –±–∞–Ω üö´ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞. \n \n –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–∏–¥–µ–æ! ‚Äç‚úàÔ∏è' +
            '\n \n –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n' +
            '\n' +
            '‚öß –°–≤–æ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é \n' +
            '\n' +
            '‚öß –ê–Ω–∏–º–µ –∫–∞—Ä—Ç–∏–Ω–∫—É\n' +
            '\n' +
            '‚öß –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç—É –ª–∏—Ü –ª—é–¥–µ–π\n' +
            '\n' +
            '‚öß –ú–µ–º–∞—Å–∏–∫–∏\n' +
            '\n' +
            '‚öß –û—Ç—Ä—ã–≤–∫–∏ –∏–∑ —Ñ–∏–ª—å–º–æ–≤\n' +
            '\n' +
            '‚öß –ú–µ–º-–≤–∏–¥–µ–æ\n' +
            '\n' +
            '‚öß –í–∞—à–µ Tik-Tok –≤–∏–¥–µ–æ (mp4)\n' +
            '\n' +
            '‚öß –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∏–∫–µ—Ä—ã');
    });

    mediaScene.on(['photo', 'video'], async (ctx) => {

        const MAX_VIDEO_SIZE = 50 * 1024 * 1024; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ (50 MB)
        const MAX_PHOTO_SIZE = 5 * 1024 * 1024; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ (5 –ú–ë)

        const fileId = ctx.message.video ? ctx.message.video.file_id : ctx.message.photo[ctx.message.photo.length - 1].file_id;
        const fileSize = ctx.message.video ? ctx.message.video.file_size : ctx.message.photo[ctx.message.photo.length - 1].file_size;


        const validVideoExtensions = ['mp4'];
        const validPhotoExtensions = ['jpg', 'jpeg', 'png', 'gif'];

        const isVideo = !!ctx.message.video; // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤–∏–¥–µ–æ
        const isPhoto = !!ctx.message.photo; // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Ñ–æ—Ç–æ

        const fileType = isVideo ? 'video' : 'photo';


        if (isVideo) {
            const extension = fileExtension(fileId);
            if (extension && !validVideoExtensions.includes(extension.toLowerCase())) {
                ctx.reply('–§–æ—Ä–º–∞—Ç –≤–∏–¥–µ–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å MP4.');
                return;
            }
        } else if (isPhoto) {
            const extension = fileExtension(fileId);
            if (extension && !validPhotoExtensions.includes(extension.toLowerCase())) {
                ctx.reply('–§–æ—Ä–º–∞—Ç —Ñ–æ—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å JPG, JPEG, PNG –∏–ª–∏ GIF.');
                return;
            }
        }


        console.log('MAX_VIDEO_SIZE –≤ –±–∞–π—Ç–∞—Ö:', MAX_VIDEO_SIZE);
        console.log('MAX_PHOTO_SIZE –≤ –±–∞–π—Ç–∞—Ö:', MAX_PHOTO_SIZE);
        console.log('–†–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö:', fileSize);
        console.log('–†–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', fileSize);

        let errorMessage = null;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏ —Ñ–æ—Ä–º–∞—Ç
        if (fileSize > MAX_PHOTO_SIZE && fileType === 'photo') {
            errorMessage = '\n –í–Ω–∏–º–∞–Ω–∏–µ! ‚ö† \n \n  –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–µ –±–æ–ª—å—à–µ - 5 –ú–ë \n \n –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–∏–¥–µ–æ! ‚Äç‚úàÔ∏è';
        }
        if (fileSize > MAX_PHOTO_SIZE && fileType === 'video') {
            errorMessage = '\n –í–Ω–∏–º–∞–Ω–∏–µ! ‚ö† \n \n  –ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ –Ω–µ –±–æ–ª—å—à–µ 50 –ú–ë \n \n  –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–∏–¥–µ–æ! ‚Äç‚úàÔ∏è';
        }
        if (ctx.session.uploadedFile) {
            ctx.reply('–í—ã —É–∂–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ —Ñ–∞–π–ª. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª.');
            return;
        }


        if (errorMessage) {
            ctx.reply(errorMessage);
            await ctx.scene.reenter(); // –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ü–µ–Ω—É
            // –í —ç—Ç–æ–º –º–µ—Å—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        } else {
            // –ï—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –∏ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∫—É –∏ –∑–∞–≥—Ä—É–∑–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            const file = await ctx.telegram.getFile(fileId);
            const url = `https://api.telegram.org/file/bot6429157048:AAHgx-wS_eqF73lMshCAcHJHI3k_xf516Hk/${file.file_path}`;
            const response = await fetch(url);
            const buffer = await response.buffer();
            const savedPath = path.join(__dirname, 'downloads', fileId);
            fs.writeFileSync(savedPath, buffer);

            await createAndShowProfile(ctx, fileId, fileType, savedPath, ctx.session);

        }
    });

    const Stage = new Scenes.Stage([
        cityScene,
        ageScene,
        infoScene,
        searchScene,
        goalScene,
        mediaScene,
    ]);

    bot.use(Stage.middleware());

    return Stage;
}
function checkUploadedFiles(ctx) {
    if (!ctx.session.uploadedFiles) {
        ctx.session.uploadedFiles = [];
    }

    if (ctx.session.uploadedFiles.length > 0) {
        ctx.reply('–í—ã —É–∂–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ —Ñ–∞–π–ª. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª.');
        return true;
    }
    return false;
}

const fileExtension = (fileId) => {
    const parts = fileId.split('.');
    if (parts.length > 1) {
        return parts[parts.length - 1].toLowerCase();
    }
    return null;
};

module.exports = {
    createScenes
};
